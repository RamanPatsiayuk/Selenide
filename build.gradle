buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "ru.d10xa:gradle-allure-plugin:0.5.5"
        // classpath 'ru.vyarus:gradle-quality-plugin:2.4.0'

        //agent "org.aspectj:aspectjweaver:1.8.10"
        //classpath "io.qameta.allure:allure-gradle:2.5"
    }
}
group 'com.selenide.example'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'ru.vyarus.quality'
apply plugin: 'ru.d10xa.allure'
//apply plugin: 'io.qameta.allure'
//apply plugin: 'groovy'

/*plugins{
    id 'ru.vyarus.quality' version '2.4.0'
    id 'io.qameta.allure'
}*/
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

ext {
    selenideVersion = '4.9'
    junitVersion = '4.12'
    springVersion = '5.0.2.RELEASE'
}

repositories {
    jcenter()
    mavenCentral()
}

/*quality {
    checkstyleVersion = '7.6.1'
    pmdVersion = '5.8.1'
    findbugsVersion = '3.0.1'
    codenarcVersion = '0.26.0'
}*/

defaultTasks 'build', 'clean', 'test'

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile 'com.codeborne:selenide:4.9'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-context', version: springVersion
    compile group: 'org.springframework', name: 'spring-context-support', version: springVersion
    compile group: 'org.springframework', name: 'spring-beans', version: springVersion
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

allure {
    aspectjweaver = true
    // Choose your test framework.
    junit = true
    testNG = false
    spock = false

    allureResultsDir = "$buildDir/allure-results"
    allureReportDir = "$buildDir/allure-report"
    aspectjVersion = "1.8.10"
    allureVersion = "1.5.4" //"2.5.0"
}
tasks.withType(Test)*.finalizedBy allureReport

//https://github.com/allure-framework/allure-gradle
//http://automation-remarks.com/2017/allure-gradle-without-plugin/
/*allure {
    version = '2.5.0'
    autoconfigure = true
    aspectjweaver = true
    aspectjVersion = '1.8.10'
    allureJavaVersion = '2.0-BETA21'
}
task generateAllure(type: Exec) {
    workingDir "$projectDir/allure/bin"
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'allure.bat', 'generate', '-c', '../../integration/build/allure-results'
    } else {
        commandLine 'bash', '-c', 'allure', 'generate', '-c',"$projectDir/integration/build/allure-results"
    }
}
tasks.withType(Test)*.finalizedBy generateAllure
*/

test {
    useJUnit()
    //systemProperty 'allure.results.directory', 'build/allure-results'
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
    systemProperties = [
            env    : System.getProperty('env', 'local'),
            browser: System.getProperty('browser', 'firefox')
    ]
}

tasks.withType(Test) {
    systemProperties['selenide.browser'] = System.getProperty('selenide.browser', 'firefox')
    systemProperties['env'] = System.getProperty('env', 'local')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task chrome(type: Test) {
    //gradle chrome
    //systemProperties['selenide.browser'] = 'chrome'
    //gradle chrome -Dselenide.browser=chrome
    systemProperties['selenide.browser'] = System.getProperty('selenide.browser', 'chrome')
}

task edge(type: Test) {
    systemProperties['selenide.browser'] = 'edge'
}

task firefox(type: Test) {
    systemProperties['selenide.browser'] = 'firefox'
}

task safari(type: Test) {
    systemProperties['selenide.browser'] = 'safari'
}

task htmlunit(type: Test) {
    systemProperties['selenide.browser'] = 'htmlunit'
}

task phantomjs(type: Test) {
    systemProperties['selenide.browser'] = 'phantomjs'
}

task cleanBuild {
    dependsOn 'clean'
    dependsOn 'build'
}

task cleanBuild1(type: GradleBuild) {
    tasks = ['clean', 'build']
}



